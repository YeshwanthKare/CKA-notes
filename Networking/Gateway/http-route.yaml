apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: example-httproute
spec:
  parentRefs:
    - name: example-gateway
  hostnames:
    - "www.example.com"
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /login
      backendRefs:
        - name: example-svc
          port: 8080
---
# Redirect HTTP to HTTPS: https://gateway-api.sigs.k8s.io/guides/http-redirect-rewrite/

apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: https-redirect
  namespace: default
spec:
  parentRefs:
    - name: nginx-gateway
  rules:
    - filters:
        - type: RequestRedirect
          requestRedirect:
            scheme: https

---
# Path rewrite: https://gateway-api.sigs.k8s.io/guides/http-redirect-rewrite/

apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: header-mod
  namespace: default
spec:
  parentRefs:
    - name: nginx-gateway
  rules:
    - filters:
        - type: RequestHeaderModifier
          requestHeaderModifier:
            add:
              x-env: staging
      backendRefs:
        - name: my-app
          port: 80

---
# HTTP header Modification: https://gateway-api.sigs.k8s.io/guides/http-header-modifier/

apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: header-mod
  namespace: default
spec:
  parentRefs:
    - name: nginx-gateway
  rules:
    - filters:
        - type: RequestHeaderModifier
          requestHeaderModifier:
            add:
              x-env: staging
      backendRefs:
        - name: my-app
          port: 80

---
# HTTP Traffic Splitting: https://gateway-api.sigs.k8s.io/guides/traffic-splitting/

apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: traffic-split
  namespace: default
spec:
  parentRefs:
    - name: nginx-gateway
  rules:
    - backendRefs:
        - name: v1-service
          port: 80
          weight: 80
        - name: v2-service
          port: 80
          weight: 20

---
# HTTP Request Mirroring: https://gateway-api.sigs.k8s.io/guides/http-request-mirroring/

apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: request-mirror
  namespace: default
spec:
  parentRefs:
    - name: nginx-gateway
  rules:
    - filters:
        - type: RequestMirror
          requestMirror:
            backendRef:
              name: mirror-service
              port: 80
      backendRefs:
        - name: my-app
          port: 80

---
# TLS Configuration: https://gateway-api.sigs.k8s.io/guides/tls/

apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: nginx-gateway-tls
  namespace: default
spec:
  gatewayClassName: nginx
  listeners:
    - name: https
      protocol: HTTPS
      port: 443
      tls:
        mode: Terminate
        certificateRefs:
          - kind: Secret
            name: tls-secret
      allowedRoutes:
        namespaces:
          from: All

---
# TCP, UDP, and Other Protocols

apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: tcp-gateway
  namespace: default
spec:
  gatewayClassName: nginx
  listeners:
    - name: tcp
      protocol: TCP
      port: 3306
      allowedRoutes:
        namespaces:
          from: All
---
# UDP Example

apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: udp-gateway
  namespace: default
spec:
  gatewayClassName: nginx
  listeners:
    - name: udp
      protocol: UDP
      port: 53
      allowedRoutes:
        namespaces:
          from: All

---
# gRPC Example

apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: grpc-route
  namespace: default
spec:
  parentRefs:
    - name: nginx-gateway
  rules:
    - matches:
        - method:
            service: my.grpc.Service
            method: GetData
      backendRefs:
        - name: grpc-service
          port: 50051
